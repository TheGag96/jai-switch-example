//
// This file was autogenerated.
//



DK_MEMBLOCK_ALIGNMENT :: 0x1000;
DK_CMDMEM_ALIGNMENT :: 4;
DK_QUEUE_MIN_CMDMEM_SIZE :: 0x10000;
DK_PER_WARP_SCRATCH_MEM_ALIGNMENT :: 0x200;
DK_NUM_UNIFORM_BUFS :: 16;
DK_NUM_STORAGE_BUFS :: 16;
DK_NUM_TEXTURE_BINDINGS :: 32;
DK_NUM_IMAGE_BINDINGS :: 8;
DK_UNIFORM_BUF_ALIGNMENT :: 0x100;
DK_UNIFORM_BUF_MAX_SIZE :: 0x10000;
DK_DEFAULT_MAX_COMPUTE_CONCURRENT_JOBS :: 128;
DK_SHADER_CODE_ALIGNMENT :: 0x100;
DK_SHADER_CODE_UNUSABLE_SIZE :: 0x400;
DK_IMAGE_DESCRIPTOR_ALIGNMENT :: 0x20;
DK_SAMPLER_DESCRIPTOR_ALIGNMENT :: 0x20;
DK_MAX_RENDER_TARGETS :: 8;
DK_NUM_VIEWPORTS :: 16;
DK_NUM_SCISSORS :: 16;
DK_MAX_VERTEX_ATTRIBS :: 32;
DK_MAX_VERTEX_BUFFERS :: 16;
DK_IMAGE_LINEAR_STRIDE_ALIGNMENT :: 32;

tag_DkDevice :: struct {}
DkDevice :: *tag_DkDevice;
tag_DkMemBlock :: struct {}
DkMemBlock :: *tag_DkMemBlock;
DkFence :: struct {
    _storage: [64] u8;
}
DkVariable :: struct {
    _storage: [16] u8;
}
tag_DkCmdBuf :: struct {}
DkCmdBuf :: *tag_DkCmdBuf;
tag_DkQueue :: struct {}
DkQueue :: *tag_DkQueue;
DkShader :: struct {
    _storage: [128] u8;
}
DkImageLayout :: struct {
    _storage: [128] u8;
}
DkImage :: struct {
    _storage: [128] u8;
}
DkImageDescriptor :: struct {
    _storage: [32] u8;
}
DkSamplerDescriptor :: struct {
    _storage: [32] u8;
}
tag_DkSwapchain :: struct {}
DkSwapchain :: *tag_DkSwapchain;

DkResult :: enum u32 {
    Success        :: 0;
    Fail           :: 1;
    Timeout        :: 2;
    OutOfMemory    :: 3;
    NotImplemented :: 4;
    MisalignedSize :: 5;
    MisalignedData :: 6;
    BadInput       :: 7;
    BadFlags       :: 8;
    BadState       :: 9;
}

DkGpuAddr :: u64;
DkCmdList :: __uintptr_t;
DkResHandle :: u32;
DkDebugFunc :: #type (userData: *void, _context: *u8, result: DkResult, message: *u8) -> void #c_call;
DkAllocFunc :: #type (userData: *void, alignment: u64, size: u64, out: **void) -> DkResult #c_call;
DkFreeFunc :: #type (userData: *void, mem: *void) -> void #c_call;
DkCmdBufAddMemFunc :: #type (userData: *void, cmdbuf: DkCmdBuf, minReqSize: u64) -> void #c_call;

DkDeviceFlags :: enum u32 {
    DepthZeroToOne     :: 0;
    DepthMinusOneToOne :: 256;
    OriginUpperLeft    :: 0;
    OriginLowerLeft    :: 512;
}

DkDeviceMaker :: struct {
    userData: *void;
    cbDebug:  DkDebugFunc;
    cbAlloc:  DkAllocFunc;
    cbFree:   DkFreeFunc;
    flags:    u32;
}

DkMemAccess :: enum u32 {
    None     :: 0;
    Uncached :: 1;
    Cached   :: 2;
    Mask     :: 3;
}

DkMemBlockFlags :: enum u32 {
    CpuAccessShift :: 0;
    GpuAccessShift :: 2;
    CpuUncached    :: 1;
    CpuCached      :: 2;
    CpuAccessMask  :: 3;
    GpuUncached    :: 4;
    GpuCached      :: 8;
    GpuAccessMask  :: 12;
    _Code          :: 16;
    Image          :: 32;
    ZeroFillInit   :: 256;
}

DkMemBlockMaker :: struct {
    device:  DkDevice;
    size:    u32;
    flags:   u32;
    storage: *void;
}

DkVarOp :: enum u32 {
    Set :: 0;
    Add :: 1;
    Sub :: 2;
    And :: 3;
    Or  :: 4;
    Xor :: 5;
}

DkVarCompareOp :: enum u32 {
    Equal      :: 0;
    Sequential :: 1;
}

DkPipelinePos :: enum u32 {
    Top        :: 0;
    Rasterizer :: 1;
    Bottom     :: 2;
}

DkCounter :: enum u32 {
    TimestampPipelineTop               :: 0;
    Timestamp                          :: 1;
    SamplesPassed                      :: 2;
    ZcullStats                         :: 3;
    InputVertices                      :: 4;
    InputPrimitives                    :: 5;
    VertexShaderInvocations            :: 6;
    TessControlShaderInvocations       :: 7;
    TessEvaluationShaderInvocations    :: 8;
    GeometryShaderInvocations          :: 9;
    FragmentShaderInvocations          :: 10;
    TessEvaluationShaderPrimitives     :: 11;
    GeometryShaderPrimitives           :: 12;
    ClipperInputPrimitives             :: 13;
    ClipperOutputPrimitives            :: 14;
    PrimitivesGenerated                :: 15;
    TransformFeedbackPrimitivesWritten :: 16;
}

DkCmdBufMaker :: struct {
    device:   DkDevice;
    userData: *void;
    cbAddMem: DkCmdBufAddMemFunc;
}

DkQueueFlags :: enum u32 {
    Graphics     :: 1;
    Compute      :: 2;
    MediumPrio   :: 0;
    HighPrio     :: 4;
    LowPrio      :: 8;
    PrioMask     :: 12;
    EnableZcull  :: 0;
    DisableZcull :: 16;
}

DkQueueMaker :: struct {
    device:                   DkDevice;
    flags:                    u32;
    commandMemorySize:        u32;
    flushThreshold:           u32;
    perWarpScratchMemorySize: u32;
    maxConcurrentComputeJobs: u32;
}

DkShaderMaker :: struct {
    codeMem:    DkMemBlock;
    control:    *void;
    codeOffset: u32;
    programId:  u32;
}

DkStage :: enum u32 {
    Vertex      :: 0;
    TessCtrl    :: 1;
    TessEval    :: 2;
    Geometry    :: 3;
    Fragment    :: 4;
    Compute     :: 5;

    MaxGraphics :: 5;
}

DkStageFlag :: enum u32 {
    Vertex       :: 1;
    TessCtrl     :: 2;
    TessEval     :: 4;
    Geometry     :: 8;
    Fragment     :: 16;
    Compute      :: 32;

    GraphicsMask :: 31;
}

DkBarrier :: enum u32 {
    None       :: 0;
    Tiles      :: 1;
    Fragments  :: 2;
    Primitives :: 3;
    Full       :: 4;
}

DkInvalidateFlags :: enum u32 {
    Image       :: 1;
    Shader      :: 2;
    Descriptors :: 4;
    Zcull       :: 8;
    L2Cache     :: 16;
}

DkImageType :: enum u32 {
    None         :: 0;
    _1D          :: 1;
    _2D          :: 2;
    _3D          :: 3;
    _1DArray     :: 4;
    _2DArray     :: 5;
    _2DMS        :: 6;
    _2DMSArray   :: 7;
    Rectangle    :: 8;
    Cubemap      :: 9;
    CubemapArray :: 10;
    Buffer       :: 11;
}

DkImageFlags :: enum u32 {
    BlockLinear    :: 0;
    PitchLinear    :: 1;
    CustomTileSize :: 2;
    HwCompression  :: 4;
    Z16EnableZbc   :: 8;

    UsageRender    :: 256;
    UsageLoadStore :: 512;
    UsagePresent   :: 1024;
    Usage2DEngine  :: 2048;
    UsageVideo     :: 4096;
}

DkImageFormat :: enum u32 {
    None                 :: 0;
    R8_Unorm             :: 1;
    R8_Snorm             :: 2;
    R8_Uint              :: 3;
    R8_Sint              :: 4;
    R16_Float            :: 5;
    R16_Unorm            :: 6;
    R16_Snorm            :: 7;
    R16_Uint             :: 8;
    R16_Sint             :: 9;
    R32_Float            :: 10;
    R32_Uint             :: 11;
    R32_Sint             :: 12;
    RG8_Unorm            :: 13;
    RG8_Snorm            :: 14;
    RG8_Uint             :: 15;
    RG8_Sint             :: 16;
    RG16_Float           :: 17;
    RG16_Unorm           :: 18;
    RG16_Snorm           :: 19;
    RG16_Uint            :: 20;
    RG16_Sint            :: 21;
    RG32_Float           :: 22;
    RG32_Uint            :: 23;
    RG32_Sint            :: 24;
    RGB32_Float          :: 25;
    RGB32_Uint           :: 26;
    RGB32_Sint           :: 27;
    RGBA8_Unorm          :: 28;
    RGBA8_Snorm          :: 29;
    RGBA8_Uint           :: 30;
    RGBA8_Sint           :: 31;
    RGBA16_Float         :: 32;
    RGBA16_Unorm         :: 33;
    RGBA16_Snorm         :: 34;
    RGBA16_Uint          :: 35;
    RGBA16_Sint          :: 36;
    RGBA32_Float         :: 37;
    RGBA32_Uint          :: 38;
    RGBA32_Sint          :: 39;
    S8                   :: 40;
    Z16                  :: 41;
    Z24X8                :: 42;
    ZF32                 :: 43;
    Z24S8                :: 44;
    ZF32_X24S8           :: 45;
    RGBX8_Unorm_sRGB     :: 46;
    RGBA8_Unorm_sRGB     :: 47;
    RGBA4_Unorm          :: 48;
    RGB5_Unorm           :: 49;
    RGB5A1_Unorm         :: 50;
    RGB565_Unorm         :: 51;
    RGB10A2_Unorm        :: 52;
    RGB10A2_Uint         :: 53;
    RG11B10_Float        :: 54;
    E5BGR9_Float         :: 55;
    RGB_BC1              :: 56;
    RGBA_BC1             :: 57;
    RGBA_BC2             :: 58;
    RGBA_BC3             :: 59;
    RGB_BC1_sRGB         :: 60;
    RGBA_BC1_sRGB        :: 61;
    RGBA_BC2_sRGB        :: 62;
    RGBA_BC3_sRGB        :: 63;
    R_BC4_Unorm          :: 64;
    R_BC4_Snorm          :: 65;
    RG_BC5_Unorm         :: 66;
    RG_BC5_Snorm         :: 67;
    RGBA_BC7_Unorm       :: 68;
    RGBA_BC7_Unorm_sRGB  :: 69;
    RGBA_BC6H_SF16_Float :: 70;
    RGBA_BC6H_UF16_Float :: 71;
    RGBX8_Unorm          :: 72;
    RGBX8_Snorm          :: 73;
    RGBX8_Uint           :: 74;
    RGBX8_Sint           :: 75;
    RGBX16_Float         :: 76;
    RGBX16_Unorm         :: 77;
    RGBX16_Snorm         :: 78;
    RGBX16_Uint          :: 79;
    RGBX16_Sint          :: 80;
    RGBX32_Float         :: 81;
    RGBX32_Uint          :: 82;
    RGBX32_Sint          :: 83;
    RGBA_ASTC_4x4        :: 84;
    RGBA_ASTC_5x4        :: 85;
    RGBA_ASTC_5x5        :: 86;
    RGBA_ASTC_6x5        :: 87;
    RGBA_ASTC_6x6        :: 88;
    RGBA_ASTC_8x5        :: 89;
    RGBA_ASTC_8x6        :: 90;
    RGBA_ASTC_8x8        :: 91;
    RGBA_ASTC_10x5       :: 92;
    RGBA_ASTC_10x6       :: 93;
    RGBA_ASTC_10x8       :: 94;
    RGBA_ASTC_10x10      :: 95;
    RGBA_ASTC_12x10      :: 96;
    RGBA_ASTC_12x12      :: 97;
    RGBA_ASTC_4x4_sRGB   :: 98;
    RGBA_ASTC_5x4_sRGB   :: 99;
    RGBA_ASTC_5x5_sRGB   :: 100;
    RGBA_ASTC_6x5_sRGB   :: 101;
    RGBA_ASTC_6x6_sRGB   :: 102;
    RGBA_ASTC_8x5_sRGB   :: 103;
    RGBA_ASTC_8x6_sRGB   :: 104;
    RGBA_ASTC_8x8_sRGB   :: 105;
    RGBA_ASTC_10x5_sRGB  :: 106;
    RGBA_ASTC_10x6_sRGB  :: 107;
    RGBA_ASTC_10x8_sRGB  :: 108;
    RGBA_ASTC_10x10_sRGB :: 109;
    RGBA_ASTC_12x10_sRGB :: 110;
    RGBA_ASTC_12x12_sRGB :: 111;
    BGR565_Unorm         :: 112;
    BGR5_Unorm           :: 113;
    BGR5A1_Unorm         :: 114;
    A5BGR5_Unorm         :: 115;
    BGRX8_Unorm          :: 116;
    BGRA8_Unorm          :: 117;
    BGRX8_Unorm_sRGB     :: 118;
    BGRA8_Unorm_sRGB     :: 119;
    R_ETC2_Unorm         :: 120;
    R_ETC2_Snorm         :: 121;
    RG_ETC2_Unorm        :: 122;
    RG_ETC2_Snorm        :: 123;
    RGB_ETC2             :: 124;
    RGB_PTA_ETC2         :: 125;
    RGBA_ETC2            :: 126;
    RGB_ETC2_sRGB        :: 127;
    RGB_PTA_ETC2_sRGB    :: 128;
    RGBA_ETC2_sRGB       :: 129;

    Count                :: 130;
}

DkImageSwizzle :: enum u32 {
    Zero  :: 0;
    One   :: 1;
    Red   :: 2;
    Green :: 3;
    Blue  :: 4;
    Alpha :: 5;
}

DkMsMode :: enum u32 {
    _1x :: 0;
    _2x :: 1;
    _4x :: 2;
    _8x :: 3;
}

DkDsSource :: enum u32 {
    Depth   :: 0;
    Stencil :: 1;
}

DkTileSize :: enum u32 {
    OneGob        :: 0;
    TwoGobs       :: 1;
    FourGobs      :: 2;
    EightGobs     :: 3;
    SixteenGobs   :: 4;
    ThirtyTwoGobs :: 5;
}

DkImageLayoutMaker :: struct {
    device:     DkDevice;
    type:       DkImageType;
    flags:      u32;
    format:     DkImageFormat;
    msMode:     DkMsMode;
    dimensions: [3] u32;
    mipLevels:  u32;
    union {
        pitchStride: u32;
        tileSize:    DkTileSize;
    }
}

DkImageView :: struct {
    pImage:         *DkImage;
    type:           DkImageType;
    format:         DkImageFormat;
    swizzle:        [4] DkImageSwizzle;
    dsSource:       DkDsSource;
    layerOffset:    u16;
    layerCount:     u16;
    mipLevelOffset: u8;
    mipLevelCount:  u8;
}

DkFilter :: enum u32 {
    Nearest :: 1;
    Linear  :: 2;
}

DkMipFilter :: enum u32 {
    None    :: 1;
    Nearest :: 2;
    Linear  :: 3;
}

DkWrapMode :: enum u32 {
    Repeat              :: 0;
    MirroredRepeat      :: 1;
    ClampToEdge         :: 2;
    ClampToBorder       :: 3;
    Clamp               :: 4;
    MirrorClampToEdge   :: 5;
    MirrorClampToBorder :: 6;
    MirrorClamp         :: 7;
}

DkCompareOp :: enum u32 {
    Never    :: 1;
    Less     :: 2;
    Equal    :: 3;
    Lequal   :: 4;
    Greater  :: 5;
    NotEqual :: 6;
    Gequal   :: 7;
    Always   :: 8;
}

DkSamplerReduction :: enum u32 {
    WeightedAverage :: 0;
    Min             :: 1;
    Max             :: 2;
}

DkSampler :: struct {
    minFilter:     DkFilter;
    magFilter:     DkFilter;
    mipFilter:     DkMipFilter;
    wrapMode:      [3] DkWrapMode;
    lodClampMin:   float;
    lodClampMax:   float;
    lodBias:       float;
    lodSnap:       float;
    compareEnable: bool;
    compareOp:     DkCompareOp;
    borderColor:   [4] union {
        value_f:  float;
        value_ui: u32;
        value_i:  s32;
    };

    maxAnisotropy: float;
    reductionMode: DkSamplerReduction;
}

DkBufExtents :: struct {
    addr: DkGpuAddr;
    size: u32;
}

DkViewport :: struct {
    x:      float;
    y:      float;
    width:  float;
    height: float;
    near:   float;
    far:    float;
}

DkSwizzle :: enum u32 {
    PositiveX :: 0;
    NegativeX :: 1;
    PositiveY :: 2;
    NegativeY :: 3;
    PositiveZ :: 4;
    NegativeZ :: 5;
    PositiveW :: 6;
    NegativeW :: 7;
}

DkViewportSwizzle :: struct {
    x: DkSwizzle;
    y: DkSwizzle;
    z: DkSwizzle;
    w: DkSwizzle;
}

DkScissor :: struct {
    x:      u32;
    y:      u32;
    width:  u32;
    height: u32;
}

DkPolygonMode :: enum u32 {
    Point :: 0;
    Line  :: 1;
    Fill  :: 2;
}

DkPolygonFlag :: enum u32 {
    Point :: 1;
    Line  :: 2;
    Fill  :: 4;

    All   :: 7;
}

DkFace :: enum u32 {
    None         :: 0;
    Front        :: 1;
    Back         :: 2;
    FrontAndBack :: 3;
}

DkFrontFace :: enum u32 {
    CW  :: 0;
    CCW :: 1;
}

DkProvokingVertex :: enum u32 {
    First :: 0;
    Last  :: 1;
}

DkCoverageModulation :: enum u32 {
    None  :: 0;
    Rgb   :: 1;
    Alpha :: 2;
    Rgba  :: 3;
}

DkSampleLocation :: struct {
    x: float;
    y: float;
}

DkLogicOp :: enum u32 {
    Clear        :: 0;
    And          :: 1;
    AndReverse   :: 2;
    Copy         :: 3;
    AndInverted  :: 4;
    NoOp         :: 5;
    Xor          :: 6;
    Or           :: 7;
    Nor          :: 8;
    Equivalent   :: 9;
    Invert       :: 10;
    OrReverse    :: 11;
    CopyInverted :: 12;
    OrInverted   :: 13;
    Nand         :: 14;
    Set          :: 15;
}

DkColorMask :: enum u32 {
    R    :: 1;
    G    :: 2;
    B    :: 4;
    A    :: 8;

    RGB  :: 7;
    RGBA :: 15;
}

DkColorWriteState :: struct {
    masks: u32;
}

DkBlendOp :: enum u32 {
    Add    :: 1;
    Sub    :: 2;
    RevSub :: 3;
    Min    :: 4;
    Max    :: 5;
}

DkBlendFactor :: enum u32 {
    Zero             :: 1;
    One              :: 2;
    SrcColor         :: 3;
    InvSrcColor      :: 4;
    SrcAlpha         :: 5;
    InvSrcAlpha      :: 6;
    DstAlpha         :: 7;
    InvDstAlpha      :: 8;
    DstColor         :: 9;
    InvDstColor      :: 10;
    SrcAlphaSaturate :: 11;
    Src1Color        :: 16;
    InvSrc1Color     :: 17;
    Src1Alpha        :: 18;
    InvSrc1Alpha     :: 19;
    ConstColor       :: 33;
    InvConstColor    :: 34;
    ConstAlpha       :: 35;
    InvConstAlpha    :: 36;
}

DkStencilOp :: enum u32 {
    Keep     :: 1;
    Zero     :: 2;
    Replace  :: 3;
    Incr     :: 4;
    Decr     :: 5;
    Invert   :: 6;
    IncrWrap :: 7;
    DecrWrap :: 8;
}

DkTiledCacheOp :: enum u32 {
    Disable    :: 0;
    Enable     :: 1;
    Flush      :: 2;
    FlushAlt   :: 3;
    UnkDisable :: 4;
    UnkEnable  :: 5;
}

DkVtxAttribSize :: enum u32 {
    _1x32       :: 18;
    _2x32       :: 4;
    _3x32       :: 2;
    _4x32       :: 1;

    _1x16       :: 27;
    _2x16       :: 15;
    _3x16       :: 5;
    _4x16       :: 3;

    _1x8        :: 29;
    _2x8        :: 24;
    _3x8        :: 19;
    _4x8        :: 10;

    _10_10_10_2 :: 48;
    _11_11_10   :: 49;
}

DkVtxAttribType :: enum u32 {
    None    :: 0;
    Snorm   :: 1;
    Unorm   :: 2;
    Sint    :: 3;
    Uint    :: 4;
    Uscaled :: 5;
    Sscaled :: 6;
    Float   :: 7;
}

DkVtxBufferState :: struct {
    stride:  u32;
    divisor: u32;
}

DkPrimitive :: enum u32 {
    Points                 :: 0;
    Lines                  :: 1;
    LineLoop               :: 2;
    LineStrip              :: 3;
    Triangles              :: 4;
    TriangleStrip          :: 5;
    TriangleFan            :: 6;
    Quads                  :: 7;
    QuadStrip              :: 8;
    Polygon                :: 9;
    LinesAdjacency         :: 10;
    LineStripAdjacency     :: 11;
    TrianglesAdjacency     :: 12;
    TriangleStripAdjacency :: 13;
    Patches                :: 14;
}

DkIdxFormat :: enum u32 {
    Uint8  :: 0;
    Uint16 :: 1;
    Uint32 :: 2;
}

DkDrawIndirectData :: struct {
    vertexCount:   u32;
    instanceCount: u32;
    firstVertex:   u32;
    firstInstance: u32;
}

DkDrawIndexedIndirectData :: struct {
    indexCount:    u32;
    instanceCount: u32;
    firstIndex:    u32;
    vertexOffset:  s32;
    firstInstance: u32;
}

DkDispatchIndirectData :: struct {
    numGroupsX: u32;
    numGroupsY: u32;
    numGroupsZ: u32;
}

DkBlitFlag :: enum u32 {
    Flip_Mask        :: 7;
    FlipX            :: 1;
    FlipY            :: 2;
    FlipZ            :: 4;

    Filter_Mask      :: 16;
    FilterNearest    :: 0;
    FilterLinear     :: 16;

    Mode_Mask        :: 224;
    ModeBlit         :: 0;
    ModeAlphaMask    :: 32;
    ModeAlphaBlend   :: 64;
    ModePremultBlit  :: 96;
    ModePremultBlend :: 128;
}

DkImageRect :: struct {
    x:      u32;
    y:      u32;
    z:      u32;
    width:  u32;
    height: u32;
    depth:  u32;
}

DkCopyBuf :: struct {
    addr:        DkGpuAddr;
    rowLength:   u32;
    imageHeight: u32;
}

DkSwapchainMaker :: struct {
    device:       DkDevice;
    nativeWindow: *void;
    pImages:      **DkImage;
    numImages:    u32;
}

dkDeviceCreate :: (maker: *DkDeviceMaker) -> DkDevice #foreign libdeko3d;
dkDeviceDestroy :: (obj: DkDevice) -> void #foreign libdeko3d;
dkDeviceGetCurrentTimestamp :: (obj: DkDevice) -> u64 #foreign libdeko3d;
dkDeviceGetCurrentTimestampInNs :: (obj: DkDevice) -> u64 #foreign libdeko3d;

dkMemBlockCreate :: (maker: *DkMemBlockMaker) -> DkMemBlock #foreign libdeko3d;
dkMemBlockDestroy :: (obj: DkMemBlock) -> void #foreign libdeko3d;
dkMemBlockGetCpuAddr :: (obj: DkMemBlock) -> *void #foreign libdeko3d;
dkMemBlockGetGpuAddr :: (obj: DkMemBlock) -> DkGpuAddr #foreign libdeko3d;
dkMemBlockGetSize :: (obj: DkMemBlock) -> u32 #foreign libdeko3d;
dkMemBlockFlushCpuCache :: (obj: DkMemBlock, offset: u32, size: u32) -> DkResult #foreign libdeko3d;

dkFenceWait :: (obj: *DkFence, timeout_ns: s64) -> DkResult #foreign libdeko3d;

dkVariableInitialize :: (obj: *DkVariable, mem: DkMemBlock, offset: u32) -> void #foreign libdeko3d;
dkVariableRead :: (obj: *DkVariable) -> u32 #foreign libdeko3d;
dkVariableSignal :: (obj: *DkVariable, op: DkVarOp, value: u32) -> void #foreign libdeko3d;

dkCmdBufCreate :: (maker: *DkCmdBufMaker) -> DkCmdBuf #foreign libdeko3d;
dkCmdBufDestroy :: (obj: DkCmdBuf) -> void #foreign libdeko3d;
dkCmdBufAddMemory :: (obj: DkCmdBuf, mem: DkMemBlock, offset: u32, size: u32) -> void #foreign libdeko3d;
dkCmdBufFinishList :: (obj: DkCmdBuf) -> DkCmdList #foreign libdeko3d;
dkCmdBufClear :: (obj: DkCmdBuf) -> void #foreign libdeko3d;
dkCmdBufBeginCaptureCmds :: (obj: DkCmdBuf, storage: *u32, max_words: u32) -> void #foreign libdeko3d;
dkCmdBufEndCaptureCmds :: (obj: DkCmdBuf) -> u32 #foreign libdeko3d;
dkCmdBufReplayCmds :: (obj: DkCmdBuf, words: *u32, num_words: u32) -> void #foreign libdeko3d;
dkCmdBufCallList :: (obj: DkCmdBuf, list: DkCmdList) -> void #foreign libdeko3d;
dkCmdBufWaitFence :: (obj: DkCmdBuf, fence: *DkFence) -> void #foreign libdeko3d;
dkCmdBufSignalFence :: (obj: DkCmdBuf, fence: *DkFence, flush: bool) -> void #foreign libdeko3d;
dkCmdBufWaitVariable :: (obj: DkCmdBuf, var: *DkVariable, op: DkVarCompareOp, value: u32) -> void #foreign libdeko3d;
dkCmdBufSignalVariable :: (obj: DkCmdBuf, var: *DkVariable, op: DkVarOp, value: u32, pos: DkPipelinePos) -> void #foreign libdeko3d;
dkCmdBufBarrier :: (obj: DkCmdBuf, mode: DkBarrier, invalidateFlags: u32) -> void #foreign libdeko3d;
dkCmdBufBindShaders :: (obj: DkCmdBuf, stageMask: u32, shaders: **DkShader, numShaders: u32) -> void #foreign libdeko3d;
dkCmdBufBindUniformBuffers :: (obj: DkCmdBuf, stage: DkStage, firstId: u32, buffers: *DkBufExtents, numBuffers: u32) -> void #foreign libdeko3d;
dkCmdBufBindStorageBuffers :: (obj: DkCmdBuf, stage: DkStage, firstId: u32, buffers: *DkBufExtents, numBuffers: u32) -> void #foreign libdeko3d;
dkCmdBufBindTextures :: (obj: DkCmdBuf, stage: DkStage, firstId: u32, handles: *DkResHandle, numHandles: u32) -> void #foreign libdeko3d;
dkCmdBufBindImages :: (obj: DkCmdBuf, stage: DkStage, firstId: u32, handles: *DkResHandle, numHandles: u32) -> void #foreign libdeko3d;
dkCmdBufBindImageDescriptorSet :: (obj: DkCmdBuf, setAddr: DkGpuAddr, numDescriptors: u32) -> void #foreign libdeko3d;
dkCmdBufBindSamplerDescriptorSet :: (obj: DkCmdBuf, setAddr: DkGpuAddr, numDescriptors: u32) -> void #foreign libdeko3d;
dkCmdBufBindRenderTargets :: (obj: DkCmdBuf, colorTargets: **DkImageView, numColorTargets: u32, depthTarget: *DkImageView) -> void #foreign libdeko3d;
dkCmdBufBindRasterizerState :: (obj: DkCmdBuf, state: *DkRasterizerState) -> void #foreign libdeko3d;
dkCmdBufBindMultisampleState :: (obj: DkCmdBuf, state: *DkMultisampleState) -> void #foreign libdeko3d;
dkCmdBufBindColorState :: (obj: DkCmdBuf, state: *DkColorState) -> void #foreign libdeko3d;
dkCmdBufBindColorWriteState :: (obj: DkCmdBuf, state: *DkColorWriteState) -> void #foreign libdeko3d;
dkCmdBufBindBlendStates :: (obj: DkCmdBuf, firstId: u32, states: *DkBlendState, numStates: u32) -> void #foreign libdeko3d;
dkCmdBufBindDepthStencilState :: (obj: DkCmdBuf, state: *DkDepthStencilState) -> void #foreign libdeko3d;
dkCmdBufBindVtxAttribState :: (obj: DkCmdBuf, attribs: *DkVtxAttribState, numAttribs: u32) -> void #foreign libdeko3d;
dkCmdBufBindVtxBufferState :: (obj: DkCmdBuf, buffers: *DkVtxBufferState, numBuffers: u32) -> void #foreign libdeko3d;
dkCmdBufBindVtxBuffers :: (obj: DkCmdBuf, firstId: u32, buffers: *DkBufExtents, numBuffers: u32) -> void #foreign libdeko3d;
dkCmdBufBindIdxBuffer :: (obj: DkCmdBuf, format: DkIdxFormat, address: DkGpuAddr) -> void #foreign libdeko3d;
dkCmdBufSetViewports :: (obj: DkCmdBuf, firstId: u32, viewports: *DkViewport, numViewports: u32) -> void #foreign libdeko3d;
dkCmdBufSetViewportSwizzles :: (obj: DkCmdBuf, firstId: u32, swizzles: *DkViewportSwizzle, numSwizzles: u32) -> void #foreign libdeko3d;
dkCmdBufSetSubpixelPrecisionBias :: (obj: DkCmdBuf, xbits: u32, ybits: u32) -> void #foreign libdeko3d;
dkCmdBufSetScissors :: (obj: DkCmdBuf, firstId: u32, scissors: *DkScissor, numScissors: u32) -> void #foreign libdeko3d;
dkCmdBufSetDepthBias :: (obj: DkCmdBuf, constantFactor: float, clamp: float, slopeFactor: float) -> void #foreign libdeko3d;
dkCmdBufSetPointSize :: (obj: DkCmdBuf, size: float) -> void #foreign libdeko3d;
dkCmdBufSetLineWidth :: (obj: DkCmdBuf, width: float) -> void #foreign libdeko3d;
dkCmdBufSetLineStipple :: (obj: DkCmdBuf, enable: bool, factor: u32, pattern: u16) -> void #foreign libdeko3d;
dkCmdBufSetPolygonStipple :: (obj: DkCmdBuf, pattern: *[32] u32) -> void #foreign libdeko3d;
dkCmdBufSetConservativeRasterEnable :: (obj: DkCmdBuf, enable: bool) -> void #foreign libdeko3d;
dkCmdBufSetConservativeRasterDilate :: (obj: DkCmdBuf, dilate: float) -> void #foreign libdeko3d;
dkCmdBufSetSampleMask :: (obj: DkCmdBuf, mask: u32) -> void #foreign libdeko3d;
dkCmdBufSetCoverageModulationTable :: (obj: DkCmdBuf, table: *[16] float) -> void #foreign libdeko3d;
dkCmdBufSetDepthBounds :: (obj: DkCmdBuf, enable: bool, near: float, far: float) -> void #foreign libdeko3d;
dkCmdBufSetAlphaRef :: (obj: DkCmdBuf, ref: float) -> void #foreign libdeko3d;
dkCmdBufSetBlendConst :: (obj: DkCmdBuf, red: float, green: float, blue: float, alpha: float) -> void #foreign libdeko3d;
dkCmdBufSetStencil :: (obj: DkCmdBuf, face: DkFace, mask: u8, funcRef: u8, funcMask: u8) -> void #foreign libdeko3d;
dkCmdBufSetPrimitiveRestart :: (obj: DkCmdBuf, enable: bool, index: u32) -> void #foreign libdeko3d;
dkCmdBufSetPatchSize :: (obj: DkCmdBuf, size: u32) -> void #foreign libdeko3d;
dkCmdBufSetTessOuterLevels :: (obj: DkCmdBuf, level0: float, level1: float, level2: float, level3: float) -> void #foreign libdeko3d;
dkCmdBufSetTessInnerLevels :: (obj: DkCmdBuf, level0: float, level1: float) -> void #foreign libdeko3d;
dkCmdBufSetTileSize :: (obj: DkCmdBuf, width: u32, height: u32) -> void #foreign libdeko3d;
dkCmdBufTiledCacheOp :: (obj: DkCmdBuf, op: DkTiledCacheOp) -> void #foreign libdeko3d;
dkCmdBufClearColor :: (obj: DkCmdBuf, targetId: u32, clearMask: u32, clearData: *void) -> void #foreign libdeko3d;
dkCmdBufClearDepthStencil :: (obj: DkCmdBuf, clearDepth: bool, depthValue: float, stencilMask: u8, stencilValue: u8) -> void #foreign libdeko3d;
dkCmdBufDiscardColor :: (obj: DkCmdBuf, targetId: u32) -> void #foreign libdeko3d;
dkCmdBufDiscardDepthStencil :: (obj: DkCmdBuf) -> void #foreign libdeko3d;
dkCmdBufResolveDepthValues :: (obj: DkCmdBuf) -> void #foreign libdeko3d;
dkCmdBufDraw :: (obj: DkCmdBuf, prim: DkPrimitive, vertexCount: u32, instanceCount: u32, firstVertex: u32, firstInstance: u32) -> void #foreign libdeko3d;
dkCmdBufDrawIndirect :: (obj: DkCmdBuf, prim: DkPrimitive, indirect: DkGpuAddr) -> void #foreign libdeko3d;
dkCmdBufDrawIndexed :: (obj: DkCmdBuf, prim: DkPrimitive, indexCount: u32, instanceCount: u32, firstIndex: u32, vertexOffset: s32, firstInstance: u32) -> void #foreign libdeko3d;
dkCmdBufDrawIndexedIndirect :: (obj: DkCmdBuf, prim: DkPrimitive, indirect: DkGpuAddr) -> void #foreign libdeko3d;
dkCmdBufDispatchCompute :: (obj: DkCmdBuf, numGroupsX: u32, numGroupsY: u32, numGroupsZ: u32) -> void #foreign libdeko3d;
dkCmdBufDispatchComputeIndirect :: (obj: DkCmdBuf, indirect: DkGpuAddr) -> void #foreign libdeko3d;
dkCmdBufPushConstants :: (obj: DkCmdBuf, uboAddr: DkGpuAddr, uboSize: u32, offset: u32, size: u32, data: *void) -> void #foreign libdeko3d;
dkCmdBufPushData :: (obj: DkCmdBuf, addr: DkGpuAddr, data: *void, size: u32) -> void #foreign libdeko3d;
dkCmdBufCopyBuffer :: (obj: DkCmdBuf, srcAddr: DkGpuAddr, dstAddr: DkGpuAddr, size: u32) -> void #foreign libdeko3d;
dkCmdBufCopyImage :: (obj: DkCmdBuf, srcView: *DkImageView, srcRect: *DkImageRect, dstView: *DkImageView, dstRect: *DkImageRect, flags: u32) -> void #foreign libdeko3d;
dkCmdBufBlitImage :: (obj: DkCmdBuf, srcView: *DkImageView, srcRect: *DkImageRect, dstView: *DkImageView, dstRect: *DkImageRect, flags: u32, factor: u32) -> void #foreign libdeko3d;
dkCmdBufResolveImage :: (obj: DkCmdBuf, srcView: *DkImageView, dstView: *DkImageView) -> void #foreign libdeko3d;
dkCmdBufCopyBufferToImage :: (obj: DkCmdBuf, src: *DkCopyBuf, dstView: *DkImageView, dstRect: *DkImageRect, flags: u32) -> void #foreign libdeko3d;
dkCmdBufCopyImageToBuffer :: (obj: DkCmdBuf, srcView: *DkImageView, srcRect: *DkImageRect, dst: *DkCopyBuf, flags: u32) -> void #foreign libdeko3d;
dkCmdBufReportCounter :: (obj: DkCmdBuf, type: DkCounter, addr: DkGpuAddr) -> void #foreign libdeko3d;
dkCmdBufReportValue :: (obj: DkCmdBuf, value: u32, addr: DkGpuAddr) -> void #foreign libdeko3d;
dkCmdBufResetCounter :: (obj: DkCmdBuf, type: DkCounter) -> void #foreign libdeko3d;

dkQueueCreate :: (maker: *DkQueueMaker) -> DkQueue #foreign libdeko3d;
dkQueueDestroy :: (obj: DkQueue) -> void #foreign libdeko3d;
dkQueueIsInErrorState :: (obj: DkQueue) -> bool #foreign libdeko3d;
dkQueueWaitFence :: (obj: DkQueue, fence: *DkFence) -> void #foreign libdeko3d;
dkQueueSignalFence :: (obj: DkQueue, fence: *DkFence, flush: bool) -> void #foreign libdeko3d;
dkQueueSubmitCommands :: (obj: DkQueue, cmds: DkCmdList) -> void #foreign libdeko3d;
dkQueueFlush :: (obj: DkQueue) -> void #foreign libdeko3d;
dkQueueWaitIdle :: (obj: DkQueue) -> void #foreign libdeko3d;
dkQueueAcquireImage :: (obj: DkQueue, swapchain: DkSwapchain) -> s32 #foreign libdeko3d;
dkQueuePresentImage :: (obj: DkQueue, swapchain: DkSwapchain, imageSlot: s32) -> void #foreign libdeko3d;

dkShaderInitialize :: (obj: *DkShader, maker: *DkShaderMaker) -> void #foreign libdeko3d;
dkShaderIsValid :: (obj: *DkShader) -> bool #foreign libdeko3d;
dkShaderGetStage :: (obj: *DkShader) -> DkStage #foreign libdeko3d;

dkImageLayoutInitialize :: (obj: *DkImageLayout, maker: *DkImageLayoutMaker) -> void #foreign libdeko3d;
dkImageLayoutGetSize :: (obj: *DkImageLayout) -> u64 #foreign libdeko3d;
dkImageLayoutGetAlignment :: (obj: *DkImageLayout) -> u32 #foreign libdeko3d;

dkImageInitialize :: (obj: *DkImage, layout: *DkImageLayout, memBlock: DkMemBlock, offset: u32) -> void #foreign libdeko3d;
dkImageGetGpuAddr :: (obj: *DkImage) -> DkGpuAddr #foreign libdeko3d;

dkImageDescriptorInitialize :: (obj: *DkImageDescriptor, view: *DkImageView, usesLoadOrStore: bool, decayMS: bool) -> void #foreign libdeko3d;

dkSamplerDescriptorInitialize :: (obj: *DkSamplerDescriptor, sampler: *DkSampler) -> void #foreign libdeko3d;

dkMultisampleStateSetLocations :: (obj: *DkMultisampleState, locations: *DkSampleLocation, numLocations: u32) -> void #foreign libdeko3d;

dkSwapchainCreate :: (maker: *DkSwapchainMaker) -> DkSwapchain #foreign libdeko3d;
dkSwapchainDestroy :: (obj: DkSwapchain) -> void #foreign libdeko3d;
dkSwapchainAcquireImage :: (obj: DkSwapchain, imageSlot: *s32, fence: *DkFence) -> void #foreign libdeko3d;
dkSwapchainSetCrop :: (obj: DkSwapchain, left: s32, top: s32, right: s32, bottom: s32) -> void #foreign libdeko3d;
dkSwapchainSetSwapInterval :: (obj: DkSwapchain, interval: u32) -> void #foreign libdeko3d;

#scope_module

libdeko3d :: #system_library,no_dll "libdeko3d";

#scope_export

#insert #run bitfields_struct(
    "DkRasterizerState",
    .{ "rasterizerEnable", #type u32, 1, .NONE },
    .{ "depthClampEnable", #type u32, 1, .NONE },
    .{ "fillRectangleEnable", #type u32, 1, .NONE },
    .{ "polygonModeFront", #type DkPolygonMode, 2, .NONE },
    .{ "polygonModeBack", #type DkPolygonMode, 2, .NONE },
    .{ "cullMode", #type DkFace, 2, .NONE },
    .{ "frontFace", #type DkFrontFace, 1, .NONE },
    .{ "provokingVertex", #type DkProvokingVertex, 1, .NONE },
    .{ "polygonSmoothEnableMask", #type u32, 3, .NONE },
    .{ "depthBiasEnableMask", #type u32, 3, .NONE },
);

#insert #run bitfields_struct(
    "DkMultisampleState",
    .{ "mode", #type DkMsMode, 3, .NONE },
    .{ "rasterizerMode", #type DkMsMode, 3, .NONE },
    .{ "alphaToCoverageEnable", #type u32, 1, .NONE },
    .{ "alphaToCoverageDither", #type u32, 1, .NONE },
    .{ "coverageToColorEnable", #type u32, 1, .NONE },
    .{ "coverageToColorOutput", #type u32, 3, .NONE },
    .{ "coverageModulation", #type DkCoverageModulation, 2, .NONE },
    .{ "__padding_0", #type u32, 18, .NONE },
    .{ "sampleLocations", #type [4] u32, 0, .NONE },
);

#insert #run bitfields_struct(
    "DkColorState",
    .{ "blendEnableMask", #type u32, 8, .NONE },
    .{ "logicOp", #type DkLogicOp, 8, .NONE },
    .{ "alphaCompareOp", #type DkCompareOp, 4, .NONE },
    .{ "__padding_0", #type u32, 12, .NONE },
);

#insert #run bitfields_struct(
    "DkBlendState",
    .{ "colorBlendOp", #type DkBlendOp, 3, .NONE },
    .{ "srcColorBlendFactor", #type DkBlendFactor, 6, .NONE },
    .{ "dstColorBlendFactor", #type DkBlendFactor, 6, .NONE },
    .{ "alphaBlendOp", #type DkBlendOp, 3, .NONE },
    .{ "srcAlphaBlendFactor", #type DkBlendFactor, 6, .NONE },
    .{ "dstAlphaBlendFactor", #type DkBlendFactor, 6, .NONE },
);

#insert #run bitfields_struct(
    "DkDepthStencilState",
    .{ "depthTestEnable", #type u32, 1, .NONE },
    .{ "depthWriteEnable", #type u32, 1, .NONE },
    .{ "stencilTestEnable", #type u32, 1, .NONE },
    .{ "__padding_0", #type u32, 1, .NONE },
    .{ "depthCompareOp", #type DkCompareOp, 4, .NONE },
    .{ "__padding_1", #type u32, 24, .NONE },
    .{ "stencilFrontFailOp", #type DkStencilOp, 4, .NONE },
    .{ "stencilFrontPassOp", #type DkStencilOp, 4, .NONE },
    .{ "stencilFrontDepthFailOp", #type DkStencilOp, 4, .NONE },
    .{ "stencilFrontCompareOp", #type DkCompareOp, 4, .NONE },
    .{ "stencilBackFailOp", #type DkStencilOp, 4, .NONE },
    .{ "stencilBackPassOp", #type DkStencilOp, 4, .NONE },
    .{ "stencilBackDepthFailOp", #type DkStencilOp, 4, .NONE },
    .{ "stencilBackCompareOp", #type DkCompareOp, 4, .NONE },
);

#insert #run bitfields_struct(
    "DkVtxAttribState",
    .{ "bufferId", #type u32, 5, .NONE },
    .{ "__padding_0", #type u32, 1, .NONE },
    .{ "isFixed", #type u32, 1, .NONE },
    .{ "offset", #type u32, 14, .NONE },
    .{ "size", #type DkVtxAttribSize, 6, .NONE },
    .{ "type", #type DkVtxAttribType, 3, .NONE },
    .{ "__padding_1", #type u32, 1, .NONE },
    .{ "isBgra", #type u32, 1, .NONE },
);

